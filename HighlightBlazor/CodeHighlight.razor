@using System.Text
@using Microsoft.JSInterop
@using System.Diagnostics;
@inject IJSRuntime JS


<pre><code class="@CodeLanguage" id="@DisplayId">@IndenttedCode</code></pre>

<div style="display:none" id="@HideId">@ChildContent</div>


@code {

    string HideId { get; set; } = Guid.NewGuid().ToString();
    string DisplayId { get; set; } = Guid.NewGuid().ToString();
    string IndenttedCode { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string ChildValue{ get; set; }

    [Parameter]
    public string CodeLanguage { get; set; } = "language-csharp";

    [Parameter]
    public bool Indent { get; set; } = true;

    private bool _isFirstRenderDone = false;


    protected override async Task OnParametersSetAsync()
    {
        if(_isFirstRenderDone)
        {

            string innerText = await JS.InvokeAsync<string>("getInnterText", HideId);
            Debug.WriteLine($"set-->{ChildValue}");
            IndenttedCode = Indent ? IndentCode(innerText) : innerText;
            //Debug.WriteLine($"--->{IndenttedCode}");
            await JS.InvokeVoidAsync("setInnerHtml", DisplayId, IndenttedCode);
            await JS.InvokeVoidAsync("highlightElementById", DisplayId);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string innerText = await JS.InvokeAsync<string>("getInnterText", HideId);
            IndenttedCode = Indent ? IndentCode(innerText) : innerText;
            StateHasChanged();
            await JS.InvokeVoidAsync("highlightElementById", DisplayId);
            _isFirstRenderDone = true;
        }
    }

    /// <summary>
    /// 缩进代码
    /// </summary>
    /// <param name="originCode"></param>
    /// <returns></returns>
    public string IndentCode(string originCode)
    {
        if (!string.IsNullOrWhiteSpace(originCode))
        {
            originCode = originCode.Trim('\n');
            var lines = originCode.Split('\n').ToArray();
            int spaceCount = lines[0].Length - lines[0].TrimStart().Length;
            StringBuilder sb = new StringBuilder();
            foreach (var line in lines)
            {
                string temp = line;
                if (line.Length > spaceCount)
                {
                    temp = line.Substring(spaceCount);
                }
                sb.AppendLine(temp);
            }
            return sb.ToString();
        }
        return string.Empty;
    }
}
